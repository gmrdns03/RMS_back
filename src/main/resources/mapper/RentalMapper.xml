<!-- AuthenticationMapper.xml -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.LimeRMS.mapper.RentalMapper">
    <select id="findRentalByRentalStat" resultType="com.project.LimeRMS.dto.ContentListDto">
        SELECT r.rentalId, r.rentalDt, r.predReturnDt, r.rentalStat, u.userId, u.userNm, c.contentId, c.contentNm FROM Rental r
        LEFT JOIN User u ON r.rentalUserId = u.userId
        LEFT JOIN Content c ON r.contentId = c.contentId
        WHERE rentalStat = #{rentalStat}
    </select>

    <select id="findRentalListByUserId" resultType="com.project.LimeRMS.dto.RentalListDto">
        SELECT
            rt.rentalId,
            b.boardNm,
            b.boardId,
            cc.cateNm,
            rt.contentId,
            c.contentNm,
            rt.rentalDt,
            rt.predReturnDt,
            rt.returnDt,
            rt.rentalStat
        FROM
            (SELECT
                r.rentalId,
                r.contentId,
                r.rentalDt,
                r.returnDt,
                r.predReturnDt,
                r.rentalStat
                FROM Rental r
            WHERE r.rentalUserId = #{userId}) rt
        LEFT JOIN Content c ON c.contentId = rt.contentId
        LEFT JOIN Board b ON b.boardId = c.boardId
        LEFT JOIN ContentCategory cc ON cc.cateId = c.cateId
        LEFT JOIN Rental r ON r.contentId = c.contentId ;
    </select>

    <update id="updateOverdue">
        UPDATE Rental
        SET rentalStat = 'CD001003', modfUserId = 1
        WHERE <![CDATA[predReturnDt < NOW()]]> AND rentalStat = 'CD001001'
    </update>

    <select id="findOverdueRentalByUserId" resultType="com.project.LimeRMS.dto.ContentListDto">
        SELECT *
            FROM (
            SELECT r.rentalId, r.rentalDt, r.predReturnDt, r.rentalStat, u.userId, u.userNm, c.contentId, c.contentNm FROM Rental r
            LEFT JOIN User u ON r.rentalUserId = u.userId
            LEFT JOIN Content c ON r.contentId = c.contentId
            WHERE rentalStat = 'CD001003' AND rentalUserId = #{userId}
            ) trg
        WHERE (trg.contentId, trg.userId) not in (SELECT contentId, receiverId FROM Notification WHERE DATE(joinDt) = CURDATE());
    </select>

    <select id="findReturnRentalByUserId" resultType="com.project.LimeRMS.dto.ContentListDto">
        SELECT *
            FROM (
            SELECT r.rentalId, r.rentalDt, r.predReturnDt, r.rentalStat, u.userId, u.userNm, c.contentId, c.contentNm FROM Rental r
            LEFT JOIN User u ON r.rentalUserId = u.userId
            LEFT JOIN Content c ON r.contentId = c.contentId
            WHERE rentalUserId = #{userId} AND rentalStat = 'CD001001' AND <![CDATA[DATEDIFF(DATE(predReturnDt), CURDATE()) <= 3]]>
            ) trg
        WHERE (trg.contentId, trg.userId) not in (SELECT contentId, receiverId FROM Notification WHERE DATE(joinDt) = CURDATE());
    </select>

    <select id="findCanceledRentalByUserId" resultType="com.project.LimeRMS.dto.ContentListDto">
        SELECT r.rentalId, r.rentalDt, r.predReturnDt, r.rentalStat, u.userId, u.userNm, c.contentId, c.contentNm FROM Rental r
        LEFT JOIN User u ON r.rentalUserId = u.userId
        LEFT JOIN Content c ON r.contentId = c.contentId
        WHERE r.rentalUserId = #{userId} AND r.contentId = #{contentId} AND r.rentalStat = 'CD001001'
        ORDER BY r.modfDt DESC
        LIMIT 1;
    </select>

    <select id="findLatestStatByContentId">
        SELECT
            rentalStat
        FROM Rental
        WHERE contentId = ${contentId}
        ORDER BY modfDt DESC
        LIMIT 1
    </select>

    <insert id="rentalContentByContentId" parameterType="map">
        INSERT INTO Rental (rentalUserId, contentId, rentalDt, predReturnDt, rentalStat, regUserId, modfUserId)
        VALUES (
            #{rentalMap.userId},
            #{rentalMap.contentId},
            #{rentalMap.rentalDt},
            #{rentalMap.predReturnDt},
            #{rentalMap.rentalStat},
            #{rentalMap.regUserId},
            #{rentalMap.modfUserId}
        )
    </insert>

    <select id="findUserRentalCntByUserId">
        SELECT COUNT(*) FROM Rental r
        WHERE rentalUserId = ${userId} AND rentalStat NOT IN ('CD001002', 'CD001003')
    </select>

    <update id="findRentalByContentId">
        UPDATE Rental
        SET rentalStat = 'CD001001', modfUserId = #{modfUserId}
        WHERE rentalUserId = #{rentalUserId} AND contentId = #{contentId} AND rentalStat = 'CD001002'
    </update>

    <update id="contentReturn">
        UPDATE Rental
        SET rentalStat = 'CD001002', returnDt = #{returnDt}, modfUserId = #{userId}
        WHERE rentalUserId = #{userId} and contentId = #{contentId}
    </update>
</mapper>
